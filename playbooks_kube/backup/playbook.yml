#################################################
# DO Community Playbooks: Docker
#################################################
---
- hosts: all
  become: true
  vars_files:
    - vars/default.yml


  pre_tasks:
    - name: Install dependencies for VirtualBox-guest
      shell: "apt-get install make gcc linux-headers-$(uname -r)"
      become: true

    - name: Run Ansible Galaxy
      local_action: command ansible-galaxy install -p /etc/ansible/roles -r requirements.yml --ignore-errors

  roles:
    - role: PeterMosmans.virtualbox-guest

  tasks:
    - name: Install aptitude using apt
      apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

    - name: Install required system packages
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools' ]

        #- name: Install dependencies for VirtualBox-guest
        #shell: "apt-get install make gcc linux-headers-$(uname -r)"
        #become: true

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Update apt and install docker-ce
      apt: update_cache=yes name=docker-ce state=latest

    - name: Install Docker Module for Python
      pip:
        name: docker

          #- name: Create Docker group
          #group:
          #name: "{{ docker_group }}"
          #state: present

          #    - name: Add remote osboxes user to Docker group
          #user:
          #name: "{{ remote_user }}"
          #group: "{{ docker_group }}"
          #append: yes

    - name: Add Docker users
      user:
        name: "{{ remote_user }}"
        append: yes
        groups: "{{ docker_group }}"
      become: true
      with_items: "{{ remote_user }}"

    - name: Pull default Docker image
      docker_image:
        name: "{{ default_container_image }}"
        source: pull

    # Creates the number of containers defined by the variable create_containers, using values from vars file
    - name: Create default containers
      docker_container:
        name: "{{ default_container_name }}{{ item }}"
        image: "{{ default_container_image }}"
        command: "{{ default_container_command }}"
        state: present
      with_sequence: count={{ create_containers }}

    - name: Workaround issue Virtualbox shared folder permissions - permission denied
      user:
        name: "{{ remote_user }}"
        append: yes
        groups: vboxsf
      become: true
      with_items: "{{ remote_user }}"

    - name: Configure Docker daemon.json
      shell: |
        cat > /etc/docker/daemon.json <<EOF
        {
          "exec-opts": ["native.cgroupdriver=systemd"],
          "log-driver": "json-file",
          "log-opts": {
            "max-size": "100m"
          },
          "storage-driver": "overlay"
        }
        EOF
        mkdir -p /etc/systemd/system/docker.service.d
        systemctl daemon-reload
        systemctl restart docker
      become: true

    - name: Add Kubernetes GPG apt Key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Add Kubernetes Repository
      apt_repository:
        repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
        state: present

    - name: Install Kubernetes
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'kubeadm', 'kubelet', 'kubectl' ]

    - name: Workaround to start kubeadm - error container runtime is not running
      shell: |
        rm /etc/containerd/config.toml
        systemctl restart containerd
      become: true

    - name: Workaround to start kubelet
      shell: |
        cat > /etc/systemd/system/kubelet.service.d/10-kubeadm.conf <<EOF
        # Note: This dropin only works with kubeadm and kubelet v1.11+
        [Service]
        Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
        Environment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml"
        # This is a file that "kubeadm init" and "kubeadm join" generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically
        EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env
        # This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use
        # the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.
        EnvironmentFile=-/etc/default/kubelet
        ExecStart=
        ExecStart=/usr/bin/kubelet \$KUBELET_KUBECONFIG_ARGS \$KUBELET_CONFIG_ARGS \$KUBELET_KUBEADM_ARGS \$KUBELET_EXTRA_ARGS
        Environment="KUBELET_EXTRA_ARGS=--fail-swap-on=false"

        EOF
        systemctl daemon-reload
        systemctl restart kubelet
      become: true

    - name: Start kubelet
      shell: |
        systemctl daemon-reload
        systemctl restart kubelet
      become: true
